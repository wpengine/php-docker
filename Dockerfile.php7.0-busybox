FROM ubuntu:xenial as builder

# persistent / runtime deps
ENV PHPIZE_DEPS \
		autoconf \
		dpkg-dev \
		file \
		g++ \
		gcc \
		libc-dev \
		libpcre3-dev \
		make \
		pkg-config \
		php-pear \
		php7.0-dev \
		php-ssh2 \
		php-cli \
		re2c
RUN apt-get update && apt-get install -y \
		$PHPIZE_DEPS \
		ca-certificates \
		curl \
		mlocate \
		libedit2 \
		libsqlite3-0 \
		libxml2 \
		xz-utils \
	--no-install-recommends && rm -r /var/lib/apt/lists/*

ENV PHP_INI_DIR /usr/local/etc/php
RUN mkdir -p $PHP_INI_DIR/conf.d

##<autogenerated>##
ENV PHP_EXTRA_CONFIGURE_ARGS --enable-fpm --enable-static --with-fpm-user=www-data --with-fpm-group=www-data
##</autogenerated>##

# Apply stack smash protection to functions using local buffers and alloca()
# Make PHP's main executable position-independent (improves ASLR security mechanism, and has no performance impact on x86_64)
# Enable optimization (-O2)
# Enable linker optimization (this sorts the hash buckets to improve cache locality, and is non-default)
# Adds GNU HASH segments to generated executables (this is used if present, and is much faster than sysv hash; in this configuration, sysv hash is also generated)
# https://github.com/docker-library/php/issues/272
ENV PHP_CFLAGS="-fstack-protector-strong -fpic -fpie -O2"
ENV PHP_CPPFLAGS="$PHP_CFLAGS"
ENV PHP_LDFLAGS="-Wl,-O1 -Wl,--hash-style=both -pie"

ENV GPG_KEYS 1A4E8B7277C42E53DBA9C7B9BCAA30EA9C0D5763 6E4F6AB321FDC07F2C332E3AC2BF0BC433CFC8B3

ENV PHP_VERSION=7.0.22
ENV PHP_SRC=/usr/src/php-$PHP_VERSION
ENV PHP_EXT_PATH=usr/local/lib/php/extensions/no-debug-non-zts-20151012
ENV PHP_URL="https://secure.php.net/get/php-7.0.22.tar.xz/from/this/mirror" PHP_ASC_URL="https://secure.php.net/get/php-7.0.22.tar.xz.asc/from/this/mirror"
ENV PHP_SHA256="408c3fbc235ec940433bfac1f3ed4bf797f61b4a1693b9fb0b6a04b2c1832501" PHP_MD5=""

RUN set -xe; \
	\
	fetchDeps=' \
		wget \
	'; \
	if ! command -v gpg > /dev/null; then \
		fetchDeps="$fetchDeps \
			dirmngr \
			gnupg2 \
		"; \
	fi; \
	apt-get update; \
	apt-get install -y --no-install-recommends $fetchDeps; \
	rm -rf /var/lib/apt/lists/*; \
	mkdir -p /usr/src; \
	cd /usr/src; \
	wget -O php.tar.xz "$PHP_URL"; \
	if [ -n "$PHP_SHA256" ]; then \
		echo "$PHP_SHA256 *php.tar.xz" | sha256sum -c -; \
	fi; \
	if [ -n "$PHP_MD5" ]; then \
		echo "$PHP_MD5 *php.tar.xz" | md5sum -c -; \
	fi; \
	\
	if [ -n "$PHP_ASC_URL" ]; then \
		wget -O php.tar.xz.asc "$PHP_ASC_URL"; \
		export GNUPGHOME="$(mktemp -d)"; \
		for key in $GPG_KEYS; do \
			gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$key"; \
		done; \
		gpg --batch --verify php.tar.xz.asc php.tar.xz; \
		rm -rf "$GNUPGHOME"; \
	fi; \
	tar Jxvf php.tar.xz; \
	rm php.tar.xz.asc php.tar.xz;

ADD scripts/pecl_install.sh /usr/local/bin/.
ADD scripts/scandeps.sh /usr/local/bin/.

RUN set -xe; \
	buildDeps=" \
		$PHP_EXTRA_BUILD_DEPS \
		libcurl4-openssl-dev \
		libbz2-dev \
		libjpeg-dev \
		libpng-dev \
		libmagick++-dev \
		libmagickwand-dev \
		libmcrypt-dev \
		libmemcached-dev \
		libxslt1-dev \
		libtool \
		gettext \
		libc-client2007e-dev \
		libkrb5-dev \
		libedit-dev \
		libsqlite3-dev \
		libssl-dev \
		libssh2-1-dev \
		libldap2-dev \
		libxml2-dev \
		zlib1g-dev \
		pax-utils \
	"; \
	apt-get update && apt-get install -y $buildDeps --no-install-recommends && rm -rf /var/lib/apt/lists/*; \
	cp /usr/lib/libc-client.so.2007e.0 /usr/lib/x86_64-linux-gnu/libc-client.a ; \
	cd /usr/src/php-$PHP_VERSION/; \
	./configure --build="x86_64-linux-gnu" --enable-fpm --enable-static --disable-shared \
	--with-fpm-user=www-data --with-fpm-group=www-data --with-config-file-path="$PHP_INI_DIR" \
	--with-config-file-scan-dir="$PHP_INI_DIR/conf.d" --with-bz2 --enable-bcmath \
	--enable-calendar --enable-dba --enable-exif --enable-ftp --with-gd --with-gettext \
	--with-kerberos --with-openssl --with-imap=/usr/lib --with-imap-ssl --with-png-dir=/usr \
	--with-jpeg-dir=/usr --enable-intl --with-ldap --with-mcrypt --with-mysqli --with-pdo-mysql \
	--enable-shmop --enable-soap --enable-sockets --enable-sysvmsg --enable-sysvsem \
	--enable-sysvshm --enable-wddx --with-xmlrpc --with-xsl --enable-zip --enable-mbstring \
	--enable-mysqlnd --with-curl --with-libedit --with-openssl --with-zlib --with-pcre-regex=/usr \
	--with-libdir="lib/x86_64-linux-gnu"; \
	make -j "$(nproc)";

RUN set -ex; \
	cd $PHP_SRC; \
	mkdir pecl; \
	# Download and build each pecl extension.
	pecl_install.sh memcached 3.0.3; \
	pecl_install.sh uopz 5.0.2; \
	pecl_install.sh igbinary 2.0.1; \
	pecl_install.sh imagick 3.4.3; \
	pecl_install.sh msgpack 2.0.2; \
	pecl_install.sh redis 3.1.3; \

	mkdir $PHP_SRC/.deploy; \
	cd $PHP_SRC/.deploy; \
	mkdir -p usr/lib usr/bin usr/local/bin usr/local/sbin usr/local/etc/php/conf.d; \
	mkdir -p usr/local/include/php/main $PHP_EXT_PATH;

RUN set -ex; \
	\
	# Download the ioncube loader and copy the appropriate binary
	# to the extensions folder
	cd $PHP_SRC/.deploy; \
	curl --connect-timeout 10 -o ioncube.tar.gz -fSL "https://downloads.ioncube.com/loader_downloads/ioncube_loaders_lin_x86-64.tar.gz"; \
	tar -zxvf ioncube.tar.gz; \
	cp ioncube/ioncube_loader_lin_7.0.so $PHP_EXT_PATH/ioncube.so; \
	rm -Rf ioncube*;

RUN set -ex; \
	\
	cd $PHP_SRC/.deploy; \
	NR_VERSION="$( \
		curl --connect-timeout 10 -sS https://download.newrelic.com/php_agent/release/ \
			| sed -n 's/.*>\(.*linux\).tar.gz<.*/\1/p' \
	)"; \
	curl --connect-timeout 10 -o nr.tar.gz -fSL "https://download.newrelic.com/php_agent/release/$NR_VERSION.tar.gz"; \
	tar -xf nr.tar.gz; \
	cp $NR_VERSION/agent/x64/newrelic-20151012.so $PHP_EXT_PATH/newrelic.so; \
	mkdir -p var/log/newrelic; \
	mkdir -p var/lib/php/opcache; \
	mkdir -p var/lib/php/sessions; \
	rm -rf newrelic-php5* nr.tar.gz;

RUN set -ex; \
	EXT_DIR="$PHP_SRC/.deploy/$PHP_EXT_PATH"; \
	cd $PHP_SRC/.deploy; \
	# Copy the php binaries and other required files to the
	# .deploy staging area, which will become the root directory
	# of the resulting docker image.
	cp ../sapi/fpm/php-fpm usr/local/sbin/.; \
	cp ../sapi/cli/php usr/local/bin/.; \
	mkdir -p $PHP_SRC/ext/ssh2/modules; \
	mkdir -p $PHP_SRC/ext/opcache/modules; \
	cp /usr/lib/php/20151012/ssh2.so $PHP_SRC/ext/ssh2/modules/.; \
	cp /usr/src/php-7.0.22/modules/opcache.so $PHP_SRC/ext/opcache/modules/.; \

	cp ../main/php_version.h usr/local/include/php/main/.; \
	for d in $(find $PHP_SRC/ext -name *.so | grep modules); \
		do cp $d $PHP_EXT_PATH/.; \
	done; \
	\
	# Activate additional modules by default
	CONF_DIR=usr/local/etc/php/conf.d; \
	echo "extension=uopz.so" > $CONF_DIR/uopz.ini; \
	echo "extension=igbinary.so" > $CONF_DIR/igbinary.ini; \
	echo "extension=imagick.so" > $CONF_DIR/imagick.ini; \
	echo "extension=msgpack.so" > $CONF_DIR/msgpack.ini; \
	echo "extension=redis.so" > $CONF_DIR/redis.ini; \
	echo "extension=memcached.so" > $CONF_DIR/memcached.ini; \
	echo "extension=ssh2.so" > $CONF_DIR/ssh2.ini; \
	echo "zend_extension=opcache.so" > $CONF_DIR/opcache.ini; \
	echo "zend_extension=ioncube.so" > $CONF_DIR/ioncube.ini; \
	\
	# Put the php-fpm and php binaries in the core runtime dependencies list
	echo "$PHP_SRC/.deploy/usr/local/sbin/php-fpm" > .rundepscore; \
	echo "$PHP_SRC/.deploy/usr/local/bin/php" >> .rundepscore; \
	# Iterate over all extensions that have .so files (pecl modules) and scan
	# for additional runtime dependencies
	find $PHP_SRC/ext -name *.so | grep modules >> .rundepscore; \
	# scandeps.sh creates the .rundeps file by doing multiple passes
	# using scanelf. It gathers the dependencies from the binaries listed
	# in the .rundepscore file. It then iterates over the resulting list as
	# many times as is specified by the DEPTH var in the scandeps.sh file.
	scandeps.sh; \
	# Grab all the dependencies and toss them in the /usr/lib/ folder.
	for f in $(cat .rundeps); \
		do cp $f usr/lib/.; \
	done;

FROM busybox:glibc

# Apparently the env does not get passed along in a multistage build
ENV PHP_VERSION=7.0.22

WORKDIR /

COPY --from=builder /usr/src/php-7.0.22/.deploy/. .
